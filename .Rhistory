Node <- fastMRCA(AnolisTree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
i <- 1
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
head(fossilData)
# New fossil data from "Amber fossils demonstrate deep-time stability of Caribbean lizard communities."
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_christophei", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_monticola", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
Node
nodelabels()
fossilData[1,"svl"]
fossilNodes
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
# Question 5: For each fossil, find the node that corresponds to the MRCA of the pair of tips in the data-frame.
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
fossilNodes
i
fossilData[3,]
grep("occult", tree$tip.label)
tree$tip.label[grep("occult", tree$tip.label)]
tree$tip.label[grep("mont", tree$tip.label)]
tree$tip.label[grep("cola", tree$tip.label)]
tree <- read.tree("https://jonsmitchell.com/data/anolis.tre")
tree$tip.label[grep("cola", tree$tip.label)]
tree$tip.label[grep("mont", tree$tip.label)]
tree$tip.label[grep("christ", tree$tip.label)]
tree$tip.label[grep("rimorum", tree$tip.label)]
tree$tip.label[grep("koop", tree$tip.label)]
tree$tip.label[grep("hend", tree$tip.label)]
# New fossil data from "Amber fossils demonstrate deep-time stability of Caribbean lizard communities."
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_christophei", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
# Question 5: For each fossil, find the node that corresponds to the MRCA of the pair of tips in the data-frame.
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
i
fossilData[4,]
tree$tip.label[grep("roos", tree$tip.label)]
tree$tip.label[grep("rico", tree$tip.label)]
# New fossil data from "Amber fossils demonstrate deep-time stability of Caribbean lizard communities."
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
# Question 5: For each fossil, find the node that corresponds to the MRCA of the pair of tips in the data-frame.
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
svl
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
fossilNodes
?fastAnc
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
setwd("C:\\Users\\justj\\Desktop\\Evolution\\Tasks\\Project")
my_data <- read.csv(file = "data_complete.csv")
write.csv (my_data, 'analysisplanhypothesis.csv')
host.genotype <- c (126, 215, 222, 305, 313, 319)
sporulated <- c (1, 1, 1, 1, 1, 1)
symbiont.genotype <- c (126, 215, 305, 313, 319, 222)
plot (host.genotype, type = "o", col = "blue", ylim = my_range, axes = FALSE, ann = FALSE)
setwd("C:\\Users\\justj\\Desktop\\Evolution\\Tasks\\Project")
my_data <- read.csv(file = "data_complete.csv")
write.csv (my_data, 'analysisplanhypothesis.csv')
my_data[,1]
unique(my_data[,1])
unique(my_data[,2])
host.genotype <- my_data$Host.Genotype
symbiont.genotype <- my_data$Symbiont.Genotype
sporulated <- my_data$Sporulated
summary (my_data)
summary (my_data$Host.Genotype)
summary (my_data$Symbiont.Genotype)
summary (my_data$Sporulated)
x <- c (126, 215, 222, 305, 313, 319)
result.mean <- mean (x)
print (result.mean)
y <- c (126, 215, 305, 313, 319, 222)
result.mean <- mean (y)
print (result.mean)
y <- c (1, 1, 1, 1, 1, 1)
result.mean <- mean (y)
print (result.mean)
plotting.data <- expand.grid (
host.genotype = seq(min(my_data$ï..Host.Genotype), max(my_data$ï..Host.Genotype), length.out=30),
symbiont.genotype = c(min(my_data$Symbiont.Genotype), mean(my_data$Symbiont.Genotype), max(my_data$Symbiont.Genotype))
)
mean (sporulated)
mean (plotting.data$host.genotype)
mean (symbiont.genotype)
median (sporulated)
median (plotting.data$host.genotype)
median (symbiont.genotype)
mode (sporulated)
mode (plotting.data$host.genotype)
mode (symbiont.genotype)
cor(my_data$ï..Host.Genotype, my_data$Symbiont.Genotype)
hist (my_data$Sporulated)
library (ggplot2)
sporulated.plot <- ggplot (my_data, aes (x=host.genotype, y=sporulated))
geom_point ()
library (ggplot2)
sporulated.plot2 <- ggplot (my_data, aes (x=symbiont.genotype, y=sporulated))
geom_point ()
oneway.test(my_data)
host.genotype <- c (126, 215, 222, 305, 313, 319)
sporulated <- c (1, 1, 1, 1, 1, 1)
symbiont.genotype <- c (126, 215, 305, 313, 319, 222)
plot (host.genotype, type = "o", col = "blue", ylim = my_range, axes = FALSE, ann = FALSE)
plot (host.genotype, type = "o", col = "blue", ylim = data, axes = FALSE, ann = FALSE)
plot (host.genotype, type = "o", col = "blue", axes = FALSE, ann = FALSE)
axis (1, at = 1:6, lab = c ("0", "2", "4", "6", "8", "10"))
axis (2, at = 1:6)
box ()
lines (symbiont.genotype, type = "o", pch = 22, lty = 2, col = "red")
title (main = "Sporulation Rate of HxG vs. SxG", col.main = "red", font.main = 4)
title (xlab = "Days", col.lab = rgb (0, 0.5, 0))
title (ylab = "Sporulation Rate per Clade Genotype", col.lab = rgb (0, 0.5, 0))
legend("bottomright", legend=c("Host Genotype per Clade Number", "Symbiont Genotype per Clade Number"), col=c("red", "blue"), lty=1:2, cex=0.8, lwd = 2, bty = "n")
dev.off ()
plot (host.genotype, type = "o", col = "blue", axes = FALSE, ann = FALSE)
axis (1, at = 1:6, lab = c ("0", "2", "4", "6", "8", "10"))
axis (2, at = 1:)
box ()
lines (symbiont.genotype, type = "o", pch = 22, lty = 2, col = "red")
title (main = "Sporulation Rate of HxG vs. SxG", col.main = "red", font.main = 4)
title (xlab = "Days", col.lab = rgb (0, 0.5, 0))
title (ylab = "Sporulation Rate per Clade Genotype", col.lab = rgb (0, 0.5, 0))
legend("bottomright", legend=c("Host Genotype per Clade Number", "Symbiont Genotype per Clade Number"), col=c("red", "blue"), lty=1:2, cex=0.8, lwd = 2, bty = "n")
head(host.genotype)
head(my_data)
# Plot the sporulation rate per genotype of the host and symbiont clades.
# We get a line graph in this example, although I want to produce a bar graph with the data.
plot (host.genotype, type = "o", col = "blue", axes = FALSE, ann = FALSE)
axis (1, at = 1:6, lab = c ("0", "2", "4", "6", "8", "10"))
axis (2, at = 1:6)
box ()
lines (symbiont.genotype, type = "o", pch = 22, lty = 2, col = "red")
head(host.genotype)
dim(host.genotype)
host.genotype
my_data
plot (host.genotype, type = "o", col = "blue")
hostGenoSpor <- tapply(my_data[,3], my_data[,1], function(x) sum(x)/length(x))
symGenoSpor <- tapply(my_data[,3], my_data[,2], function(x) sum(x)/length(x))
?barplot
barplot(c(hostGenoSpor, symGenoSpor), beside=T)
barplot(cbind(hostGenoSpor, symGenoSpor), beside=T)
hostGenoSpor
symGenoSpor
hostGenoSpor <- tapply(my_data[,3], my_data[,1], function(x) sum(x)/length(x))
symGenoSpor <- tapply(my_data[,3], my_data[,2], function(x) sum(x)/length(x))
barplot(cbind(hostGenoSpor, symGenoSpor[names(hostGenoSpor)]), beside=T)
barplot(rbind(hostGenoSpor, symGenoSpor[names(hostGenoSpor)]), beside=T)
barplot(rbind(hostGenoSpor, symGenoSpor[names(hostGenoSpor)]), beside=T, col=c("lightgreen", "orange"))
barplot(rbind(hostGenoSpor, symGenoSpor[names(hostGenoSpor)]), beside=T, col=c("yellow", "orange"))
setwd ('C:\\Users\\justj\\Desktop\\Evolution\\Tasks\\Task_08')
library (phytools)
tree <- read.tree("https://jonsmitchell.com/data/anolis.tre")
plot(tree, type="fan")
tree$tip.label
tree$edge.length
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors = F, row.names = 1)
# Examining the data.
data
data[,1]
head(data)
summary(data)
data.frame(data)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
?fastAnc
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*tree$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
tree<-pbtree(n=26,tip.label=LETTERS)
plotTree(tree)
x<-fastBM(tree)
x
phenogram(tree,x,spread.labels=TRUE,spread.cost=c(1,0))
obj<-contMap(anole.tree,exp(svl),plot=FALSE)
obj<-contMap(tree,exp(svl),plot=FALSE)
plotTree.wBars(obj$tree,exp(svl),method="plotSimmap", tip.labels=TRUE,fsize=0.7,colors=obj$cols,type="fan",scale=0.002)
add.color.bar(1.0,obj$cols,title="trait value",lims=obj$lims,prompt=FALSE, x=0.9*par()$usr[1],y=0.9*par()$usr[3])
data(tree)
plotSimmap(tree,fsize=0.6,ftype="i",ylim=c(-1,Ntip(tree)))
a<-x[as.character(1:tree$Nnode+Ntip(tree))]
x<-x[tree$tip.label]
plot(a,fastAnc(tree,x),xlab="actaul ancestral states", ylab="estimated ancestral states")
lines(range(c(x,a)),range(c(x,a)),lty="dashed",col="red")
tree <- pbtree(n=26,scale=1,tip.label=LETTERS)
x <- fastBM(tree,internal=TRUE)
a <- x[as.character(1:tree$Nnode+Ntip(tree))]
x <- x[tree$tip.label]
fit < -fastAnc(tree,x,CI=TRUE)
fit.bd(fastAnc(tree,x,CI=TRUE))
plot(x,tree$svl,xlab="true states",ylab="estimated states")
lines(range(c(x,x)),range(c(x,x)),lty="dashed",col="red")
lines(range(c(x)),range(c(x)),lty="dashed",col="red")
plot(tree$svl,xlab="true states",ylab="estimated states")
phenogram(fossilData,x,spread.labels=TRUE,spread.cost=c(1,0))
fossilgraph <- pbtree(n=26,tip.label=LETTERS)
plotTree(fossilgraph)
x <- fastBM(fossilgraph)
x
phenogram(fossilData,x,spread.labels=TRUE,spread.cost=c(1,0))
phenogram(fossilgraph,x,spread.labels=TRUE,spread.cost=c(1,0))
plotTree.wBars(obj$fossilgraph,exp(x),method="plotSimmap", tip.labels=TRUE,fsize=0.7,colors=obj$cols,type="fan",scale=0.002)
plotTree.wBars(fossilData$fossilgraph,exp(x),method="plotSimmap", tip.labels=TRUE,fsize=0.7,colors=obj$cols,type="fan",scale=0.002)
install.packages("geiger")
library('geiger')
? fitContinuous
fitContinuous(fossilData, fossilNodes, SE = 0, model = c("BM", "OU", "EB", "rate_trend", "lambda", "kappa", "delta", "mean_trend", "white"), bounds = list(), control = list(method = c("subplex", "L-BFGS-B"), niter = 100, FAIL = 1e+200, hessian = FALSE, CI = 0.95, ncores = NULL))
geo=get(data(Ancestors_withFossils))
geo=get(data(fossilData))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
geo=get(data(fossilData))
tmp=fossilData(geo$phy, geo$dat)
tmp=fossilgraph(geo$phy, geo$dat)
geo=get(data("geospiza"))
tmp=treedata(geo$phy, geo$dat)
phy=tmp$phy
dat=tmp$data
brownFit <-  fitContinuous(phy, dat[,"svl"], SE=NA, control=list(niter=50), ncores=2)
brownFit <-  fitContinuous(phy, dat[,"wingL"], SE=NA, control=list(niter=50), ncores=2)
print(names(brownFit))
print(brownFit)
flik=brownFit$lik
print(argn(flik))
brownFit <-  fitContinuous(phy, dat[,"tip1", "tip2"], SE=NA, control=list(niter=50), ncores=2)
brownFit <-  fitContinuous(phy, dat[,"Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus", "Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"], SE=NA, control=list(niter=50), ncores=2)
fitGeospiza=function(trait=c("wingL","tarsusL","culmenL","beakD","gonysW")){
trait=match.arg(trait, c("wingL","tarsusL","culmenL","beakD","gonysW"))
models=c("BM", "OU", "EB", "white")
summaries=c("diffusion", "Ornstein-Uhlenbeck", "early burst", "white noise")
aic.se=numeric(length(models))
lnl.se=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" with SE *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=NA, model=models[m],
bounds=list(SE=c(0,0.5)), ncores=2)
print(tmp)
aic.se[m]=tmp$opt$aicc
lnl.se[m]=tmp$opt$lnL
}
aic=numeric(length(models))
lnl=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=0,model=models[m], ncores=2)
print(tmp)
aic[m]=tmp$opt$aicc
lnl[m]=tmp$opt$lnL
}
names(aic.se)<-names(lnl.se)<-names(aic)<-names(lnl)<-models
delta_aic<-function(x) x-x[which(x==min(x))]
daic=delta_aic(aic)
cat("\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," *** \n",sep="")
cat("\tdelta-AIC values for models assuming no measurement error
\t\t\t\t zero indicates the best model\n\n")
print(daic, digits=2)
daic.se=delta_aic(aic.se)
cat("\n\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," ***\n",sep="")
cat("\t\t   delta-AIC values for models estimating SE
\t\t\t\t zero indicates the best model\n\n")
print(daic.se, digits=2)
cat("\n\n\n")
res_aicc=rbind(aic, aic.se, daic, daic.se)
rownames(res_aicc)=c("AICc","AICc_SE","dAICc", "dAICc_SE")
return(res_aicc)
}
daic=delta_aic(aic)
cat("\n\n\n\t\t\t\t*** Model Comparison: ",trait," *** \n",sep="")
cat("\tdelta-AIC values assuming no error
\t\t\t\t zero AIC is best model\n\n")
daic=delta_aic(aic)
cat("\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," *** \n",sep="")
cat("\tdelta-AIC values for models assuming no measurement error
\t\t\t\t zero indicates the best model\n\n")
print(daic, digits=2)
daic=delta_aic(aic)
geo=get(data("geospiza"))
tmp=treedata(geo$phy, geo$dat)
phy=tmp$phy
dat=tmp$data
brownFit <-  fitContinuous(phy, dat[,"wingL"], SE=NA, control=list(niter=50), ncores=2)
print(names(brownFit))
print(brownFit)
flik=brownFit$lik
print(argn(flik))
fitGeospiza=function(trait=c("wingL","tarsusL","culmenL","beakD","gonysW")){
trait=match.arg(trait, c("wingL","tarsusL","culmenL","beakD","gonysW"))
models=c("BM", "OU", "EB", "white")
summaries=c("diffusion", "Ornstein-Uhlenbeck", "early burst", "white noise")
aic.se=numeric(length(models))
lnl.se=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" with SE *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=NA, model=models[m],
bounds=list(SE=c(0,0.5)), ncores=2)
print(tmp)
aic.se[m]=tmp$opt$aicc
lnl.se[m]=tmp$opt$lnL
}
aic=numeric(length(models))
lnl=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=0,model=models[m], ncores=2)
print(tmp)
aic[m]=tmp$opt$aicc
lnl[m]=tmp$opt$lnL
}
names(aic.se)<-names(lnl.se)<-names(aic)<-names(lnl)<-models
delta_aic<-function(x) x-x[which(x==min(x))]
daic=delta_aic(aic)
cat("\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," *** \n",sep="")
cat("\tdelta-AIC values for models assuming no measurement error
\t\t\t\t zero indicates the best model\n\n")
print(daic, digits=2)
daic.se=delta_aic(aic.se)
cat("\n\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," ***\n",sep="")
cat("\t\t   delta-AIC values for models estimating SE
\t\t\t\t zero indicates the best model\n\n")
print(daic.se, digits=2)
cat("\n\n\n")
res_aicc=rbind(aic, aic.se, daic, daic.se)
rownames(res_aicc)=c("AICc","AICc_SE","dAICc", "dAICc_SE")
return(res_aicc)
}
res=fitGeospiza("wingL")
print(res)
install.packages("picante")
library('geiger')
library('picante')
library('phytools')
library(picante)
plot(fossilData)
plot(tree)
plot(Ancestors_withFossils)
name.check(fossilData)
name.check(tree)
fossils <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors = F, row.names = 1)
plot(fossils)
name.check(fossils)
anolesvlData <- read.csv("anolisDataAppended.csv", row.names = 1)
anolesvlData <- read.csv("https://jonsmitchell.com/data/svl.csv", row.names = 1)
anolesvlTree <- read.tree("anolis.phy")
anolesvlTree <- read.tree(data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps")))
lambdaModel <- fitContinuous(fossilgraph, svl, model = "lambda")
?fitContinuous
anolesvlData <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors = F, row.names = 1)
lambdaModel <- fitContinuous(anolesvlData, svl, model = "lambda", warnings = FALSE)
lambdaModel <- fitContinuous(tree, svl, model = "lambda", warnings = FALSE)
lambdaModel <- fitContinuous(phy, dat, model = "lambda")
brownianModel <- fitContinuous(phy, dat, model = "BM")
nosigModel <- fitContinuous(phy, dat, model = "white")
lambdaModel$opt$aicc
lambdaModel$opt$aicc
nosigModel$opt$aicc
brownianModel
lambdaModel
nosigModel
?fastAnc
?fitContinuous
?fastAnc
?fitContinuous
?fastAnc
?fitContinuous
?fastAnc
setwd ('C:\\Users\\justj\\Desktop\\Evolution\\Tasks\\Task_08')
library (phytools)
tree <- read.tree("https://jonsmitchell.com/data/anolis.tre")
plot(tree, type="fan")
tree$tip.label
tree$edge.length
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors = F, row.names = 1)
data
data[,1]
head(data)
summary(data)
data.frame(data)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*tree$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type="fan", legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c("Anolis_aliniger", "Anolis_aliniger", "Anolis_occultus", "Anolis_ricordii", "Anolis_cristatellus", "Anolis_occultus"), tip2=c("Anolis_chlorocyanus", "Anolis_coelestinus", "Anolis_hendersoni", "Anolis_cybotes", "Anolis_angusticeps", "Anolis_angusticeps"))
fossilNodes <- c()
nodeN <- c()
for (i in 1:nrow(fossilData)){
Node <- fastMRCA(tree, fossilData[i, "tip1"], fossilData[i, "tip2"])
fossilNodes[i] <- fossilData[i, "svl"]
nodeN[i] <- Node
}
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
fossilgraph <- pbtree(n=26,tip.label=LETTERS)
plotTree(fossilgraph)
x <- fastBM(fossilgraph)
x
phenogram(fossilgraph,x,spread.labels=TRUE,spread.cost=c(1,0))
library(geiger)
? fitContinuous
# Time to run the models!
geo=get(data("geospiza"))
tmp=treedata(geo$phy, geo$dat)
phy=tmp$phy
dat=tmp$data
brownFit <-  fitContinuous(phy, dat[,"wingL"], SE=NA, control=list(niter=50), ncores=2)
print(names(brownFit))
print(brownFit)
flik=brownFit$lik
print(argn(flik))
fitGeospiza=function(trait=c("wingL","tarsusL","culmenL","beakD","gonysW")){
trait=match.arg(trait, c("wingL","tarsusL","culmenL","beakD","gonysW"))
models=c("BM", "OU", "EB", "white")
summaries=c("diffusion", "Ornstein-Uhlenbeck", "early burst", "white noise")
aic.se=numeric(length(models))
lnl.se=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" with SE *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=NA, model=models[m],
bounds=list(SE=c(0,0.5)), ncores=2)
print(tmp)
aic.se[m]=tmp$opt$aicc
lnl.se[m]=tmp$opt$lnL
}
aic=numeric(length(models))
lnl=numeric(length(models))
for(m in 1:length(models)){
cat("\n\n\n\n\t*** ", paste(toupper(summaries[m]),": fitting ", sep=""), models[m],
" *** \n", sep="")
tmp=fitContinuous(phy,dat[,trait],SE=0,model=models[m], ncores=2)
print(tmp)
aic[m]=tmp$opt$aicc
lnl[m]=tmp$opt$lnL
}
names(aic.se)<-names(lnl.se)<-names(aic)<-names(lnl)<-models
delta_aic<-function(x) x-x[which(x==min(x))]
daic=delta_aic(aic)
cat("\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," *** \n",sep="")
cat("\tdelta-AIC values for models assuming no measurement error
\t\t\t\t zero indicates the best model\n\n")
print(daic, digits=2)
daic.se=delta_aic(aic.se)
cat("\n\n\n\n\t\t\t\t*** MODEL COMPARISON: ",trait," ***\n",sep="")
cat("\t\t   delta-AIC values for models estimating SE
\t\t\t\t zero indicates the best model\n\n")
print(daic.se, digits=2)
cat("\n\n\n")
res_aicc=rbind(aic, aic.se, daic, daic.se)
rownames(res_aicc)=c("AICc","AICc_SE","dAICc", "dAICc_SE")
return(res_aicc)
}
res=fitGeospiza("wingL")
print(res)
library(geiger)
library(picante)
library(phytools)
anolesvlData <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors = F, row.names = 1)
lambdaModel <- fitContinuous(phy, dat, model = "lambda")
brownianModel <- fitContinuous(phy, dat, model = "BM")
nosigModel <- fitContinuous(phy, dat, model = "white")
lambdaModel$opt$aicc
brownianModel$opt$aicc
lambdaModel$opt$aicc
nosigModel$opt$aicc
brownianModel
lambdaModel
nosigModel
